using Microsoft.EntityFrameworkCore;
using System.IO;

namespace FitAirlines.WebAPI.Database
{
    
    public partial class FitAirlinesContext
    {
        partial void OnModelCreatingPartial(ModelBuilder modelBuilder)
        {
            // Countries
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 1, CountryName = "Poland", ShortInfo = "Poland may not be an obvious holiday destination, but it has a lot to offer. It’s the perfect place for a weekend getaway, a skiing trip, or a peaceful beach escape. From impressive natural beauty, to rich history and mouthwatering food, here is why Poland should be number one on your travel wish list." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 2, CountryName = "Croatia", ShortInfo = "Thanks in part to that dazzling World Cup run, Croatia is buzzier than ever, although each year increasing numbers of travelers seek out this idyllic haven on the Adriatic, known for its richly historic and evocative cities, exceptional food and wine, and heavenly sailing waters." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 3, CountryName = "New Zeland", ShortInfo = "New Zealand is a tiny country. Made up of two rather remote islands (and many smaller ones) and with a population of just over four million people, it is not the most acessible place in the world to visit. Yet it remains one of the world greatest tourist destinations." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 4, CountryName = "Australia", ShortInfo = "One of the most popular reasons to visit Australia is the snorkelling and scuba diving around the Great Barrier Reef. It’s the world’s largest living organism (so big that it has its own post box), and the entire Reef is bigger than the United Kingdom, Holland and Switzerland combined!" });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 5, CountryName = "Japan", ShortInfo = "All the beautiful ancient Buddhist temples and Shinto shrines are reason enough to visit Japan. One of the best-preserved cities in Japan, Kyoto offers something like 2,000 Buddhist temples and shrines within the limits of the Kansai Region city, while Nara is home to no less than 8 UNESCO World Heritage Sites." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 6, CountryName = "Thailand", ShortInfo = "Whether visitors are staying in the Land of Smiles for one day or one month, Thai food is so delicious and diverse that visitors should never have to eat the same dish twice. Visitors will even find that the cuisine changes as their location does, keeping their food options interesting as they venture from one city to the next." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 7, CountryName = "Nepal", ShortInfo = "Nepal still evades travellers’ bucket lists, and we for one can’t understand why: the views are stunning (you have jungle, lakes, and mountains), the people are friendly, it’s home to once-in-a-lifetime treks and it’s safe and affordable. So what are you waiting for? Here are our 17 reasons to visit Nepal in 2019." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 8, CountryName = "Botswana", ShortInfo = "Botswana is rich in culture and wildlife, and here Botswana Holidays gives us not one, but six reasons that will definitely inspire you to visit this amazing country!" });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 9, CountryName = "Latvia", ShortInfo = "Also known to be the pearl of Baltic States, Latvia is located in the Baltic region in Northern Europe. It has an enchanting history, long and well established traditions and rich culture." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 10, CountryName = "Germany", ShortInfo = "There’s no way around it: Germany has firmly established itself as a first rate travel destination, not just for the well-informed few but for the happy-go-lucky crowds of tourists from all over the world too; in case anyone wonders why: this country has much more to it than meets the eye (no rhyme intended)." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 11, CountryName = "France", ShortInfo = "I do not need to convince you to come over to visit or live in France. France is still the top holiday’s destination in the world. Everyone seems to dream about coming to France and everyone is fascinated by France & French people and language of course." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 12, CountryName = "Spain", ShortInfo = "Spain really does have it all, from incredible landscapes and beaches, to world-famous cuisine and rich history – not to mention fantastic museums and striking architecture." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 13, CountryName = "Portugal", ShortInfo = "I bet you’ve probably checked most European destinations off your travel bucket list by now: the UK, France, Spain, Italy, Germany, Ireland, Austria, Switzerland… Have I missed any? Oh yeah! You should visit Portugal." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 14, CountryName = "Italy", ShortInfo = "Italy isn’t just for travelers who crave the world’s best pizzas, pastas and wines. The food (and wine) in this uniquely boot-shaped country is one reason to add it to your bucket list, but the historic cities, snow-capped mountains, pristine coastlines and endless museums will assure you that one visit is not enough." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 15, CountryName = "Greece", ShortInfo = "Want to visit Greece? Good choice! It’s a fantastic country that offers everything from beaches and islands to culture and history as well as delicious food and friendly locals." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 16, CountryName = "Switzerland", ShortInfo = "Switzerland may seem relatively small as compared to other European nations but that certainly does not mean that it has less to offer. Rather, it has set itself apart from the rest of Europe – its unparalleled landscapes, peaceful environments and cosmopolitan cities." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 17, CountryName = "United Kingdom", ShortInfo = "The United Kingdom is a great place to visit. In fact, England, Scotland, Wales and the Offshore Islands all offer great vacation and holiday destinations with something for everyone—singles, couples, and families." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 18, CountryName = "Uruguay", ShortInfo = "Uruguay’s entire southeast coast is littered with beaches. The Río de la Plata River, the widest in the world, makes up the beaches in the south. As you go eastwards, you’ll see how the river water gradually mixes with the Atlantic Ocean, creating more blue and green beaches with bigger waves." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 19, CountryName = "Mexico", ShortInfo = "Mexico is one of the year’s hottest destinations, what with its secret island escapes, Caribbean coastline and cosmopolitan capital city, as well as its thriving restaurant scene and quirky colonial towns that are ideal for day trips. " });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 20, CountryName = "Canada", ShortInfo = "The expanse of Canadas natural beauty, from mountains and glaciers to secluded lakes and forests, is almost unparalleled worldwide. But Canadas allure is not just the great outdoors." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 21, CountryName = "Vietnam", ShortInfo = "Holidaymakers from these four countries will be permitted entry for up to 15 days without having to acquire documentation, while an e-visa will be necessary for for trips of up to 30 days." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 22, CountryName = "Indonesia", ShortInfo = "Their itinerary has included rafting down the Ayung River and visiting the Jatiluwih rice terraces, after which they are expected to visit Jakarta, the Indonesian capital. Here are 15 reasons to follow them to the vast archipelago.   " });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 23, CountryName = "Ireland", ShortInfo = "With its scene-stealing natural beauty and multitude of things to see and do, Ireland is a dream tourist destination." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 24, CountryName = "Sri Lanka", ShortInfo = "Dive with blue whales in season or watch spinner dolphins leap about in Kalpitiya. Sri Lanka also has 5,800 wild elephants ambling about and the biggest concentration of leopards in the world." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 25, CountryName = "Kenya", ShortInfo = "Long after you have left Kenya, there are some things that will stay with you forever – little treasures, both tangible and intangible." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 26, CountryName = "Albania", ShortInfo = "Currently becoming one of the world’s most sought-after travel destinations, Albania is growing fast to accommodate visitors but also staying true to its strong rural culture. From beautiful nature to the more modern urban attractions, there’s so much to discover." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 27, CountryName = "India", ShortInfo = "According to the biennial World Economic Forum (WEF) Travel and Tourism Competitiveness Report, India ranks 10th best for “price competitiveness”. Luxurious accommodation is relatively affordable, eating out cost very little indeed, and you can get around the country by train for peanuts." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 28, CountryName = "Wales", ShortInfo = "If you love hearty food, a distinct culture, the outdoors, cosy pubs, fascinating traditions and breathtaking scenery then Wales is for you. It’s never easy to sum up a whole country but if you’re considering a visit to the land of song, here are the top 12 reasons why you should go ahead and do it." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 29, CountryName = "Morocco", ShortInfo = "North Africa’s Morocco is a popular destination, attracting culture lovers, backpackers, adventure travelers, couples, families, foodies, and more." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 30, CountryName = "Netherlands", ShortInfo = "Finding an excuse to visit the Netherlands is rarely difficult, thanks to the nation’s charming cities, beautiful countryside, and world-leading cultural attractions. For some additional motivation, we’ve put together the following list of top reasons to visit the Netherlands at least once." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 31, CountryName = "Colombia", ShortInfo = "You do not need to be a huge expert in the sociopolitical history of Latin America in the last half-century to know that Colombia has not always been a country you would consider as a holiday option." });
            modelBuilder.Entity<Countries>().HasData(new Countries() { CountryId = 32, CountryName = "Philippines", ShortInfo = "The Philippines will never fail to amaze you. The stunning sights above and under the sea, the culture, the hospitality, the food, and of course, the friendly people willing to welcome visitors wherever and whenever." });

            // Cities
            modelBuilder.Entity<Cities>().HasData(new Cities { CityId = 1, CityName = "Kielce", ShortInfo = "First impressions of Kielce (kyel-tseh) are not likely to be positive. The town is ringed by postwar housing projects that on a rainy day, or any day, can look downright dispiriting. But dig a little deeper and you’ll find a lively city with a surprisingly elegant core.", Picture = File.ReadAllBytes("Assets/kielce.jpg"), CountryId = 1 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 2, CityName = "Wroclaw", ShortInfo = "Are you wondering where to go during your next trip to Europe? Next, to its most famous cities, such as London, Paris or Barcelona, there are some that few have heard of. One of them is Wroclaw.", Picture = File.ReadAllBytes("Assets/wroclaw.jpg"), CountryId = 1 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 3, CityName = "Krakow", ShortInfo = "From a booming café culture to wild nightlife, fascinating historical spots to pretty parks, there are plenty of reasons why a visit to Krakow should be on the menu this year.", Picture = File.ReadAllBytes("Assets/krakow.jpg"), CountryId = 1 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 4, CityName = "Gdansk", ShortInfo = "Poland’s Baltic seaside city of Gdansk has sat in the background for years as one of the most underrated cities in Europe.", Picture = File.ReadAllBytes("Assets/gdansk.jpg"), CountryId = 1 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 5, CityName = "Warsaw", ShortInfo = "Warsaw has undergone some rapid changes in the last 20 years since the fall of communism. It has developed into a city for new business, turned into a tourist hub and really proved why this is the true capital city, ahead of previous capitals Gniezno and Kraków", Picture = File.ReadAllBytes("Assets/warsaw.jpg"), CountryId = 1 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 6, CityName = "Lodz", ShortInfo = "What makes Lodz such a fascinating destination in Poland is how wildly different it is to other major attractions.", Picture = File.ReadAllBytes("Assets/lodz.jpg"), CountryId = 1 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 7, CityName = "Gdynia", ShortInfo = "You might argue that modern Gdynia is a history lesson in itself, created as it was ... such as the Emigration Museum is improving the choice of places to visit.", Picture = File.ReadAllBytes("Assets/gdynia.jpg"), CountryId = 1 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 8, CityName = "Katowice", ShortInfo = "Katowice - the most underrated and misunderstood city in Poland, with a bright future ahead.", Picture = File.ReadAllBytes("Assets/katowice.jpg"), CountryId = 1 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 9, CityName = "Gliwice", ShortInfo = "Gliwice comes as a real surprise for those to determined to pay it a visit. From wooden towers to leafy gardens to historic churches, this is a city full of suprises.", Picture = File.ReadAllBytes("Assets/gliwice.jpg"), CountryId = 1 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 10, CityName = "Bialystok", ShortInfo = "When trying to figure out how to get between Lithuania and Poland, I came across the option to travel to the city of Bialystok in far eastern", Picture = File.ReadAllBytes("Assets/bialystok.jpg"), CountryId = 1 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 11, CityName = "Zagreb", ShortInfo = "As the inland capital of a country famous for its dazzling island-speckled coastline, Zagreb is often overlooked by travellers.", Picture = File.ReadAllBytes("Assets/zagreb.jpg"), CountryId = 2 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 12, CityName = "Split", ShortInfo = "No longer just a launchpad to Dalmatia’s islands, Split has successfully shaken off its one-time image as an industrial backwater, reinventing itself as a city where antiquity and urban life fully intersect.", Picture = File.ReadAllBytes("Assets/split.jpg"), CountryId = 2 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 13, CityName = "Dubrovnik", ShortInfo = "Should there even be a specific reason to visit Dubrovnik? To gaze upon the Pearl of the Adriatic, a historic jewel set within pristine City Walls, is almost reason alone.", Picture = File.ReadAllBytes("Assets/dubrovnik.jpg"), CountryId = 2 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 14, CityName = "Rijeka", ShortInfo = "Check out what Rijeka’s history, culture, heritage, nature have to offer… what is worth a visit while you’re here and what you will remember Rijeka by.", Picture = File.ReadAllBytes("Assets/rijeka.jpg"), CountryId = 2 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 15, CityName = "Hvar", ShortInfo = "The island of Hvar has a reputation of being one of the most beautiful in Croatia and has been named by some travel magazines one of the most beautiful places in the World.", Picture = File.ReadAllBytes("Assets/hvar.jpg"), CountryId = 2 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 16, CityName = "Osijek", ShortInfo = "Visit Osijek, Croatia in the Slavonia region for both city and nature experiences - and exceptional local cuisine and wine.", Picture = File.ReadAllBytes("Assets/osijek.jpg"), CountryId = 2 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 17, CityName = "Makarska", ShortInfo = "Makarska has always been the center of the surrounding region known as Makarska Riviera, one of the most famous tourist destinations on the Croatian coast.", Picture = File.ReadAllBytes("Assets/makarska.jpg"), CountryId = 2 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 18, CityName = "Zadar", ShortInfo = "I always love thinking of the hundreds of generations of people who walked the same route when I visit towns like Zadar, the weight of history etc.", Picture = File.ReadAllBytes("Assets/zadar.jpg"), CountryId = 2 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 19, CityName = "Auckland", ShortInfo = "It’s no secret that Auckland is New Zealand’s largest city both population and landmass-wise. In fact, Auckland has a larger population than the whole South Island!", Picture = File.ReadAllBytes("Assets/auckland.jpg"), CountryId = 3 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 20, CityName = "Wellington", ShortInfo = "Wellington is a popular choice for backpackers to stay a while.", Picture = File.ReadAllBytes("Assets/wellington.jpg"), CountryId = 3 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 21, CityName = "Christchurch", ShortInfo = "The South Island’s largest city is not only teaming with work opportunities for backpackers, but the art work, views from the Port Hills, and surf beaches entice many to explore.", Picture = File.ReadAllBytes("Assets/christchurch.jpg"), CountryId = 3 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 22, CityName = "Hamilton", ShortInfo = "Situated on the banks of the might Waikato River, Hamilton is the centre of the Waikato region.", Picture = File.ReadAllBytes("Assets/hamilton.jpg"), CountryId = 3 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 23, CityName = "Gold Coast", ShortInfo = "As the closest thing Australia has to Miami, Gold Coast is a glitzy strip of modern high-rises built on 90 miles of sunshine-soaked coastline.", Picture = File.ReadAllBytes("Assets/goldcoast.jpg"), CountryId = 4 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 24, CityName = "Cairns", ShortInfo = "Everything is the opposite Down Under. Winter is summer and the further north you go, the hotter it gets.", Picture = File.ReadAllBytes("Assets/cairns.jpg"), CountryId = 4 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 25, CityName = "Darwin", ShortInfo = "The most laid-back city in a famously laid-back country, Darwin’s far northern location has it closer to Indonesia and Papua New Guinea than Sydney or Melbourne.", Picture = File.ReadAllBytes("Assets/darwin.jpg"), CountryId = 4 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 26, CityName = "Adelaide", ShortInfo = "Probably Australia’s most overlooked of the country’s five cities with populations over one million.", Picture = File.ReadAllBytes("Assets/adelaide.jpg"), CountryId = 4 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 27, CityName = "Hobart", ShortInfo = "Hobart is a beautiful and underrated city in the equally overlooked and misunderstood island of Tasmania.", Picture = File.ReadAllBytes("Assets/hobart.jpg"), CountryId = 4 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 28, CityName = "Tokyo", ShortInfo = "The Tokyo Metropolis is made up of 23 Special Wards, home to upwards of 35 million people.", Picture = File.ReadAllBytes("Assets/tokyo.jpg"), CountryId = 5 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 29, CityName = "Yokohama", ShortInfo = "It is known for being Japan’s first port that officially opened to foreign trade in 1859. It’s not a stretch to say that international influences have shaped Yokohama’s character, from the city’s signature brick architecture.", Picture = File.ReadAllBytes("Assets/yokohama.jpg"), CountryId = 5 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 30, CityName = "Nagoya", ShortInfo = "Nagoya has long been the center of Japan’s automotive and aviation manufacturing, as well as a technological hub with a growing robotics industry.", Picture = File.ReadAllBytes("Assets/nagoya.jpg"), CountryId = 5 });
            modelBuilder.Entity<Cities>().HasData(new Cities() { CityId = 31, CityName = "Kyoto", ShortInfo = "Kyoto was the official capital of Japan for over 1,000 years and remains one of the foremost destinations to experience traditional Japanese culture.", Picture = File.ReadAllBytes("Assets/kyoto.jpg"), CountryId = 5 });

            // Airports
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 1, AirportName = "Kielce Lotnisko Glowne", IsAvailable = true, CityId = 1 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 2, AirportName = "Kielce-Cminsk Lotnisko", IsAvailable = true, CityId = 1 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 3, AirportName = "Kielce Lotnisko Narodowe", IsAvailable = true, CityId = 1 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 4, AirportName = "Wroclaw Lotnisko Biskupin", IsAvailable = true, CityId = 2 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 5, AirportName = "Lotnisko Morskie Oko", IsAvailable = true, CityId = 2 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 6, AirportName = "Lotnisko Hala Stulecia", IsAvailable = true, CityId = 2 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 7, AirportName = "Krakow Lotnisko Narodowe", IsAvailable = true, CityId = 3 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 8, AirportName = "Gdansk Lotnisko", IsAvailable = true, CityId = 4 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 9, AirportName = "Warsaw Lotnisko Glowne Narodowe", IsAvailable = true, CityId = 5 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 10, AirportName = "Lodz Airport", IsAvailable = true, CityId = 6 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 11, AirportName = "Gdynia Airport", IsAvailable = true, CityId = 7 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 12, AirportName = "Katowice Airport", IsAvailable = true, CityId = 8 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 13, AirportName = "Gliwice Airport", IsAvailable = true, CityId = 9 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 14, AirportName = "Bialystok Airport", IsAvailable = true, CityId = 10 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 15, AirportName = "Zagreb Main Airport", IsAvailable = true, CityId = 11 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 16, AirportName = "Dubrava Airport", IsAvailable = true, CityId = 11 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 17, AirportName = "Jelacic Airport", IsAvailable = true, CityId = 11 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 18, AirportName = "Split Airport", IsAvailable = true, CityId = 12 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 19, AirportName = "Cilipi Airport", IsAvailable = true, CityId = 13 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 20, AirportName = "Rijeka Airport", IsAvailable = true, CityId = 14 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 21, AirportName = "Hvar Airport", IsAvailable = true, CityId = 15 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 22, AirportName = "Osijek Airport", IsAvailable = true, CityId = 16 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 23, AirportName = "Makarska Airport", IsAvailable = true, CityId = 17 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 24, AirportName = "Zadar Airport", IsAvailable = true, CityId = 18 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 25, AirportName = "Auckland Airport", IsAvailable = true, CityId = 19 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 26, AirportName = "Wellington Airport", IsAvailable = true, CityId = 20 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 27, AirportName = "Christchurch Airport", IsAvailable = true, CityId = 21 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 28, AirportName = "Hamilton Airport", IsAvailable = true, CityId = 22 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 29, AirportName = "Gold Coast Airport", IsAvailable = true, CityId = 23 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 30, AirportName = "Cairns Airport", IsAvailable = true, CityId = 24 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 31, AirportName = "Darwin Airport", IsAvailable = true, CityId = 25 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 32, AirportName = "Adelaide Airport", IsAvailable = true, CityId = 26 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 33, AirportName = "Hobart Airport", IsAvailable = true, CityId = 27 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 34, AirportName = "Tokyo Main Airport", IsAvailable = true, CityId = 28 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 35, AirportName = "Tokyo Oyo Airport", IsAvailable = true, CityId = 28 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 36, AirportName = "Tokyo Takahuma Airport", IsAvailable = true, CityId = 28 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 37, AirportName = "Yokohama Airport", IsAvailable = true, CityId = 29 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 38, AirportName = "Nagoya Airport", IsAvailable = true, CityId = 30 });
            modelBuilder.Entity<Airports>().HasData(new Airports() { AirportId = 39, AirportName = "Kyoto Airport", IsAvailable = true, CityId = 31 });

            // Offer Types
            modelBuilder.Entity<OfferTypes>().HasData(new OfferTypes() { OfferTypeId = 1, TypeName = "Regional", TypeDescription = "This offer type reffers to offers containing flights which share the same regional part of the specific area/continent." });
            modelBuilder.Entity<OfferTypes>().HasData(new OfferTypes() { OfferTypeId = 2, TypeName = "Seasonal", TypeDescription = "This offer type reffers to offers containing flights which belongs to the same season of the year" });
            modelBuilder.Entity<OfferTypes>().HasData(new OfferTypes() { OfferTypeId = 3, TypeName = "Special", TypeDescription = "This offer type reffers to offers containing flights which belongs to the offers of special/uncategorized types." });

            // Offers
            modelBuilder.Entity<Offers>().HasData(new Offers() { OfferId = 1, OfferName = "Green Poland", ShortInfo = "While parts of the country do still feel like a time warp, today's Poland also has a vibrant urbanity, enticing food and design culture, dynamic history, and kindhearted natives.", Picture = File.ReadAllBytes("Assets/offer1.jpg"), StartDate = new System.DateTime(2023, 4, 1), EndDate = new System.DateTime(2023, 6, 1), IsActive = true, DateAdded = new System.DateTime(2022, 10, 10), OfferTypeId = 1 });
            modelBuilder.Entity<Offers>().HasData(new Offers() { OfferId = 2, OfferName = "Perfect Summer", ShortInfo = "A perfect balance of time with myself, with friends, and with family.", Picture = File.ReadAllBytes("Assets/offer2.jpg"), StartDate = new System.DateTime(2022, 5, 12), EndDate = new System.DateTime(2022, 10, 1), IsActive = true, DateAdded = new System.DateTime(2022, 10, 10), OfferTypeId = 1 });
            modelBuilder.Entity<Offers>().HasData(new Offers() { OfferId = 3, OfferName = "Christmas Magic", ShortInfo = "I am the traditions, I am the baker for school sales, I am the buyer of last-minute presents that were forgotten.", Picture = File.ReadAllBytes("Assets/offer3.jpg"), StartDate = new System.DateTime(2023, 11, 1), EndDate = new System.DateTime(2024, 1, 1), IsActive = true, DateAdded = new System.DateTime(2022, 10, 10), OfferTypeId = 1 });
            modelBuilder.Entity<Offers>().HasData(new Offers() { OfferId = 4, OfferName = "Travelling Adventure", ShortInfo = "Leading an active adventure lifestyle has it's benefits. Here are ways it can improve your quality of life and overall sense of well-being.", Picture = File.ReadAllBytes("Assets/offer4.jpg"), StartDate = new System.DateTime(2023, 4, 1), EndDate = new System.DateTime(2023, 6, 1), IsActive = true, DateAdded = new System.DateTime(2022, 10, 11), OfferTypeId = 1 });
            modelBuilder.Entity<Offers>().HasData(new Offers() { OfferId = 5, OfferName = "FITable journey", ShortInfo = "Travel takes us out of our comfort zones and inspires us to see, taste and try new things.", Picture = File.ReadAllBytes("Assets/offer5.jpg"), StartDate = new System.DateTime(2022, 6, 1), EndDate = new System.DateTime(2023, 9, 1), IsActive = true, DateAdded = new System.DateTime(2022, 9, 10), OfferTypeId = 1 });
            modelBuilder.Entity<Offers>().HasData(new Offers() { OfferId = 6, OfferName = "FIT Special", ShortInfo = "It constantly challenges us, not only to adapt to and explore new surroundings, but also to engage with different people, to embrace adventures as they come and to share new and meaningful experiences with friends and loved ones.", Picture = File.ReadAllBytes("Assets/offer6.jpg"), StartDate = new System.DateTime(2022, 4, 1), EndDate = new System.DateTime(2022, 12, 31), IsActive = true, DateAdded = new System.DateTime(2022, 10, 10), OfferTypeId = 1 });

            // Planes
            modelBuilder.Entity<Planes>().HasData(new Planes() { PlaneId = 1, PlaneName = "Fitovac M20", Capacity = 300, NumberOfColumns = 6, IsAvailable = true });
            modelBuilder.Entity<Planes>().HasData(new Planes() { PlaneId = 2, PlaneName = "DLearningovac M60", Capacity = 150, NumberOfColumns = 6, IsAvailable = true });
            modelBuilder.Entity<Planes>().HasData(new Planes() { PlaneId = 3, PlaneName = "Mrezar 443", Capacity = 84, NumberOfColumns = 6, IsAvailable = true });
            modelBuilder.Entity<Planes>().HasData(new Planes() { PlaneId = 4, PlaneName = "Sistemac 1010", Capacity = 306, NumberOfColumns = 6, IsAvailable = true });
            modelBuilder.Entity<Planes>().HasData(new Planes() { PlaneId = 5, PlaneName = "Coder 17", Capacity = 150, NumberOfColumns = 6, IsAvailable = true });
            modelBuilder.Entity<Planes>().HasData(new Planes() { PlaneId = 6, PlaneName = "Mostarac 1000", Capacity = 180, NumberOfColumns = 6, IsAvailable = true });
            modelBuilder.Entity<Planes>().HasData(new Planes() { PlaneId = 7, PlaneName = "Studentovic 21", Capacity = 90, NumberOfColumns = 6, IsAvailable = true });
            modelBuilder.Entity<Planes>().HasData(new Planes() { PlaneId = 8, PlaneName = "Apsolvent 333", Capacity = 150, NumberOfColumns = 6, IsAvailable = true });

            // MembershipTypes
            modelBuilder.Entity<MembershipTypes>().HasData(new MembershipTypes() { MembershipTypeId = 1, Title = "Basic", IsPriorityAvailable = false, IsExtraBaggageAvailable = false, IsFitsandwichAvailable = false, IsSeatChangeAvailable = false, IsBonusDrinkAvailable = false, IsBonusMealAvailable = false, BasicTicketDiscount = 0, BasicFoodDrinkDiscount = 0, ShortInfo = "Default Membership Type" });
            modelBuilder.Entity<MembershipTypes>().HasData(new MembershipTypes() { MembershipTypeId = 2, Title = "Blue", IsPriorityAvailable = true, IsExtraBaggageAvailable = true, IsFitsandwichAvailable = false, IsSeatChangeAvailable = false, IsBonusDrinkAvailable = false, IsBonusMealAvailable = false, BasicTicketDiscount = 0, BasicFoodDrinkDiscount = 0, ShortInfo = "With Blue FIT membership you have a priority while checking in and you are able to take the extra baggage." });
            modelBuilder.Entity<MembershipTypes>().HasData(new MembershipTypes() { MembershipTypeId = 3, Title = "Gold", IsPriorityAvailable = true, IsExtraBaggageAvailable = true, IsFitsandwichAvailable = true, IsSeatChangeAvailable = true, IsBonusDrinkAvailable = false, IsBonusMealAvailable = false, BasicTicketDiscount = 0, BasicFoodDrinkDiscount = 0, ShortInfo = "With Gold FIT membership you will get special FIT sandwich before every flight and if you would like to change a seat during the flight and if there are some other free seats, you will be able to do it." });
            modelBuilder.Entity<MembershipTypes>().HasData(new MembershipTypes() { MembershipTypeId = 4, Title = "Platinum", IsPriorityAvailable = true, IsExtraBaggageAvailable = true, IsFitsandwichAvailable = true, IsSeatChangeAvailable = true, IsBonusDrinkAvailable = true, IsBonusMealAvailable = true, BasicTicketDiscount = 0, BasicFoodDrinkDiscount = 0, ShortInfo = "With Platinum FIT membership you will get one extra meal and one extra drink for free." });
            modelBuilder.Entity<MembershipTypes>().HasData(new MembershipTypes() { MembershipTypeId = 5, Title = "Diamond", IsPriorityAvailable = true, IsExtraBaggageAvailable = true, IsFitsandwichAvailable = true, IsSeatChangeAvailable = true, IsBonusDrinkAvailable = true, IsBonusMealAvailable = true, BasicTicketDiscount = 1, BasicFoodDrinkDiscount = 1, ShortInfo = "With Diamond FIT membership you will get an additional discount for your ticket as long as for all meals and drinks in the FIT menu." });

            // UserRoles
            modelBuilder.Entity<UserRoles>().HasData(new UserRoles() { UserRoleId = 1, Title = "Administrator", IsAbleToAddNewUsers = true, IsAbleToAddNewOffers = true, IsAbleToAddNewFlights = true, IsAbleToAddNewPlanes = true, IsAbleToAddUserCredits = true, IsAbleToAddNewReservations = true, IsAbleToAddNewPlaces = true, IsSuperUser = true });
            modelBuilder.Entity<UserRoles>().HasData(new UserRoles() { UserRoleId = 2, Title = "Boss", IsAbleToAddNewUsers = true, IsAbleToAddNewOffers = false, IsAbleToAddNewFlights = false, IsAbleToAddNewPlanes = false, IsAbleToAddUserCredits = false, IsAbleToAddNewReservations = false, IsAbleToAddNewPlaces = false, IsSuperUser = false });
            modelBuilder.Entity<UserRoles>().HasData(new UserRoles() { UserRoleId = 3, Title = "Flight Offers Manager", IsAbleToAddNewUsers = false, IsAbleToAddNewOffers = true, IsAbleToAddNewFlights = true, IsAbleToAddNewPlanes = true, IsAbleToAddUserCredits = false, IsAbleToAddNewReservations = false, IsAbleToAddNewPlaces = true, IsSuperUser = false });
            modelBuilder.Entity<UserRoles>().HasData(new UserRoles() { UserRoleId = 4, Title = "Cashier", IsAbleToAddNewUsers = false, IsAbleToAddNewOffers = false, IsAbleToAddNewFlights = false, IsAbleToAddNewPlanes = false, IsAbleToAddUserCredits = true, IsAbleToAddNewReservations = true, IsAbleToAddNewPlaces = false, IsSuperUser = false });
            modelBuilder.Entity<UserRoles>().HasData(new UserRoles() { UserRoleId = 5, Title = "FIT Member", IsAbleToAddNewUsers = false, IsAbleToAddNewOffers = false, IsAbleToAddNewFlights = false, IsAbleToAddNewPlanes = false, IsAbleToAddUserCredits = false, IsAbleToAddNewReservations = true, IsAbleToAddNewPlaces = false, IsSuperUser = false });

            // Users
            modelBuilder.Entity<Users>().HasData(new Users() { UserId = 1, Picture = File.ReadAllBytes("Assets/user1.jpg"), FirstName = "Josip", LastName = "Rezic", BirthDate = new System.DateTime(1996, 8, 15), Gender = "M", PasswordHash = "6Pl/upEE0epQR5SObftn+s2fW3M=", Email = "admin@fit.ba", ContactNumber = "063-124-542", Credit = 300, StartDate = new System.DateTime(2021, 8, 31), IsActive = true, UserRoleId = 1, MembershipTypeId = 5 });
            modelBuilder.Entity<Users>().HasData(new Users() { UserId = 2, Picture = File.ReadAllBytes("Assets/user2.jpg"), FirstName = "Bosko", LastName = "Bossovic", BirthDate = new System.DateTime(1995, 8, 14), Gender = "M", PasswordHash = "6Pl/upEE0epQR5SObftn+s2fW3M=", Email = "boss@fit.ba", ContactNumber = "312123534", Credit = 0, StartDate = new System.DateTime(2021, 8, 31), IsActive = true, UserRoleId = 2, MembershipTypeId = 5 });
            modelBuilder.Entity<Users>().HasData(new Users() { UserId = 3, Picture = File.ReadAllBytes("Assets/user3.jpg"), FirstName = "Letelko", LastName = "Naletilic", BirthDate = new System.DateTime(1994, 8, 13), Gender = "M", PasswordHash = "6Pl/upEE0epQR5SObftn+s2fW3M=", Email = "manager@fit.ba", ContactNumber = "112343237", Credit = 0, StartDate = new System.DateTime(2021, 8, 31), IsActive = true, UserRoleId = 3, MembershipTypeId = 1 });
            modelBuilder.Entity<Users>().HasData(new Users() { UserId = 4, Picture = File.ReadAllBytes("Assets/user4.jpg"), FirstName = "Blagajka", LastName = "Blagajevic", BirthDate = new System.DateTime(1993, 8, 12), Gender = "F", PasswordHash = "6Pl/upEE0epQR5SObftn+s2fW3M=", Email = "cashier@fit.ba", ContactNumber = "653-866-555", Credit = 300, StartDate = new System.DateTime(2021, 8, 31), IsActive = true, UserRoleId = 4, MembershipTypeId = 1 });
            modelBuilder.Entity<Users>().HasData(new Users() { UserId = 5, Picture = File.ReadAllBytes("Assets/user5.jpg"), FirstName = "Fitovac", LastName = "Studentovic", BirthDate = new System.DateTime(1992, 1, 11), Gender = "M", PasswordHash = "6Pl/upEE0epQR5SObftn+s2fW3M=", Email = "member@fit.ba", ContactNumber = "999-966-555", Credit = 1534, StartDate = new System.DateTime(2021, 8, 31), IsActive = true, UserRoleId = 5, MembershipTypeId = 1 });

            // Flights
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 1, CityId = 1, DestinationAirportId = 1, OfferId = 1, PlaneId = 1, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 10, 1), VoucherCode = "C!ysl", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2023, 4, 10), EndDate = new System.DateTime(2023, 4, 15), PilotFullName = "Pilotko Pilotovicz", FlightDuration = System.TimeSpan.FromMinutes(61), Price = 140, ShortInfo = "Life is a journey. When we stop, things don’t go right.", Picture = File.ReadAllBytes("Assets/kielce.jpg"), Notes = "Please remember about discounts for organizers of events in the Centennial Hall.", AvailableToMemberTypeId = 1, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 2, CityId = 2, DestinationAirportId = 6, OfferId = 1, PlaneId = 3, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 10, 2), VoucherCode = "Es+GD", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2023, 4, 9), EndDate = new System.DateTime(2023, 4, 13), PilotFullName = "Juraj Samouk", FlightDuration = System.TimeSpan.FromMinutes(195), Price = 50, ShortInfo = "In order to complete our amazing life journey successfully, it is vital that we turn each and every dark tear into a pearl of wisdom, and find the blessing in every curse.", Picture = File.ReadAllBytes("Assets/wroclaw.jpg"), Notes = "Please remember that in order to submit orders you need an appropriate agreement signed with the Bank or DMBH for relevant services and/or products.", AvailableToMemberTypeId = 2, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 3, CityId = 3, DestinationAirportId = 7, OfferId = 1, PlaneId = 1, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 10, 3), VoucherCode = "Es+GD", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2023, 4, 8), EndDate = new System.DateTime(2023, 4, 16), PilotFullName = "Letko Krilovac", FlightDuration = System.TimeSpan.FromMinutes(115), Price = 510, ShortInfo = "Life is a journey. When we stop, things don’t go right.", Picture = File.ReadAllBytes("Assets/krakow.jpg"), Notes = "Dear passengers, in order to create a time-saving airport experience, in some airports we accept only credit card payments.", AvailableToMemberTypeId = 1, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 4, CityId = 4, DestinationAirportId = 8, OfferId = 1, PlaneId = 2, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 10, 4), VoucherCode = "Es+GD", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2023, 4, 7), EndDate = new System.DateTime(2023, 4, 11), PilotFullName = "Robert Spadovar", FlightDuration = System.TimeSpan.FromMinutes(195), Price = 260, ShortInfo = "In order to complete our amazing life journey successfully, it is vital that we turn each and every dark tear into a pearl of wisdom, and find the blessing in every curse.", Picture = File.ReadAllBytes("Assets/gdansk.jpg"), Notes = "Please remember that in order to submit orders you need an appropriate agreement signed with the Bank or DMBH for relevant services and/or products.", AvailableToMemberTypeId = 2, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 5, CityId = 5, DestinationAirportId = 9, OfferId = 1, PlaneId = 1, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 10, 5), VoucherCode = "Es+GD", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2023, 4, 6), EndDate = new System.DateTime(2023, 4, 10), PilotFullName = "Juraj Samouk", FlightDuration = System.TimeSpan.FromMinutes(115), Price = 100, ShortInfo = "You take people, you put them on a journey, you give them peril, you find out who they really are.", Picture = File.ReadAllBytes("Assets/warsaw.jpg"), Notes = "According to professional traveller Josh Gates, Travel is motion, and as Newton pointed out, things that start moving want to keep moving.", AvailableToMemberTypeId = 1, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 6, CityId = 6, DestinationAirportId = 10, OfferId = 1, PlaneId = 2, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 10, 6), VoucherCode = "Es+GD", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2023, 4, 5), EndDate = new System.DateTime(2023, 4, 9), PilotFullName = "Pilotko Pilotovicz", FlightDuration = System.TimeSpan.FromMinutes(92), Price = 1024, ShortInfo = "Life is a journey. When we stop, things don’t go right.", Picture = File.ReadAllBytes("Assets/lodz.jpg"), Notes = "Please remember about discounts for organizers of events in the Centennial Hall.", AvailableToMemberTypeId = 2, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 7, CityId = 7, DestinationAirportId = 11, OfferId = 1, PlaneId = 3, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 10, 7), VoucherCode = "Es+GD", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2023, 4, 4), EndDate = new System.DateTime(2023, 4, 8), PilotFullName = "Juraj Samouk", FlightDuration = System.TimeSpan.FromMinutes(122), Price = 260, ShortInfo = "Life is a journey. When we stop, things don’t go right.", Picture = File.ReadAllBytes("Assets/gdynia.jpg"), Notes = "Dear passengers, in order to create a time-saving airport experience, in some airports we accept only credit card payments.", AvailableToMemberTypeId = 1, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 8, CityId = 8, DestinationAirportId = 12, OfferId = 1, PlaneId = 1, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 10, 8), VoucherCode = "Es+GD", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2023, 4, 3), EndDate = new System.DateTime(2023, 4, 20), PilotFullName = "Pilotko Pilotovicz", FlightDuration = System.TimeSpan.FromMinutes(195), Price = 510, ShortInfo = "In order to complete our amazing life journey successfully, it is vital that we turn each and every dark tear into a pearl of wisdom, and find the blessing in every curse.", Picture = File.ReadAllBytes("Assets/katowice.jpg"), Notes = "Dear passengers, in order to create a time-saving airport experience, in some airports we accept only credit card payments.", AvailableToMemberTypeId = 2, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 9, CityId = 9, DestinationAirportId = 13, OfferId = 1, PlaneId = 2, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 10, 9), VoucherCode = "Es+GD", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2023, 4, 2), EndDate = new System.DateTime(2023, 4, 3), PilotFullName = "Letko Krilovac", FlightDuration = System.TimeSpan.FromMinutes(92), Price = 260, ShortInfo = "You take people, you put them on a journey, you give them peril, you find out who they really are.", Picture = File.ReadAllBytes("Assets/gliwice.jpg"), Notes = "Please remember about discounts for organizers of events in the Centennial Hall.", AvailableToMemberTypeId = 1, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 10, CityId = 10, DestinationAirportId = 14, OfferId = 1, PlaneId = 2, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 10, 10), VoucherCode = "Es+GD", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2023, 4, 1), EndDate = new System.DateTime(2023, 4, 4), PilotFullName = "Juraj Samouk", FlightDuration = System.TimeSpan.FromMinutes(115), Price = 510, ShortInfo = "In order to complete our amazing life journey successfully, it is vital that we turn each and every dark tear into a pearl of wisdom, and find the blessing in every curse.", Picture = File.ReadAllBytes("Assets/bialystok.jpg"), Notes = "We are pleased to inform you that registered clients of PKS POLONUS can use the new option: SENDING TICKETS by SMS.", AvailableToMemberTypeId = 1, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 11, CityId = 11, DestinationAirportId = 15, OfferId = 2, PlaneId = 2, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 10, 11), VoucherCode = "L0RJt", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2022, 5, 12), EndDate = new System.DateTime(2022, 5, 21), PilotFullName = "Pilotko Pilotovicz", FlightDuration = System.TimeSpan.FromMinutes(195), Price = 260, ShortInfo = "Life is a journey. When we stop, things don’t go right.", Picture = File.ReadAllBytes("Assets/zagreb.jpg"), Notes = "According to professional traveller Josh Gates, Travel is motion, and as Newton pointed out, things that start moving want to keep moving.", AvailableToMemberTypeId = 1, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 12, CityId = 12, DestinationAirportId = 18, OfferId = 2, PlaneId = 1, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 10, 12), VoucherCode = "aCH*u", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2022, 5, 12), EndDate = new System.DateTime(2022, 5, 29), PilotFullName = "Letko Krilovac", FlightDuration = System.TimeSpan.FromMinutes(122), Price = 1024, ShortInfo = "You take people, you put them on a journey, you give them peril, you find out who they really are.", Picture = File.ReadAllBytes("Assets/split.jpg"), Notes = "Please remember that in order to submit orders you need an appropriate agreement signed with the Bank or DMBH for relevant services and/or products.", AvailableToMemberTypeId = 1, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 13, CityId = 13, DestinationAirportId = 19, OfferId = 2, PlaneId = 2, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 10, 13), VoucherCode = "x7%pD", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2022, 5, 13), EndDate = new System.DateTime(2022, 5, 21), PilotFullName = "Juraj Samouk", FlightDuration = System.TimeSpan.FromMinutes(115), Price = 510, ShortInfo = "Life is a journey. When we stop, things don’t go right.", Picture = File.ReadAllBytes("Assets/dubrovnik.jpg"), Notes = "Please remember about discounts for organizers of events in the Centennial Hall.", AvailableToMemberTypeId = 2, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 14, CityId = 14, DestinationAirportId = 20, OfferId = 2, PlaneId = 6, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 10, 14), VoucherCode = "#LXzb", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2022, 5, 13), EndDate = new System.DateTime(2022, 5, 20), PilotFullName = "Pilotko Pilotovicz", FlightDuration = System.TimeSpan.FromMinutes(122), Price = 140, ShortInfo = "The best part of life is to decide to make the journey through life like a best selling book.", Picture = File.ReadAllBytes("Assets/rijeka.jpg"), Notes = "Dear passengers, in order to create a time-saving airport experience, in some airports we accept only credit card payments.", AvailableToMemberTypeId = 3, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 15, CityId = 15, DestinationAirportId = 21, OfferId = 2, PlaneId = 2, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 10, 15), VoucherCode = "9HamA", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2022, 5, 23), EndDate = new System.DateTime(2022, 5, 28), PilotFullName = "Letko Krilovac", FlightDuration = System.TimeSpan.FromMinutes(195), Price = 510, ShortInfo = "You take people, you put them on a journey, you give them peril, you find out who they really are.", Picture = File.ReadAllBytes("Assets/hvar.jpg"), Notes = "Please remember that in order to submit orders you need an appropriate agreement signed with the Bank or DMBH for relevant services and/or products.", AvailableToMemberTypeId = 2, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 16, CityId = 16, DestinationAirportId = 22, OfferId = 2, PlaneId = 7, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 10, 16), VoucherCode = "IC3oh", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2022, 5, 14), EndDate = new System.DateTime(2022, 5, 22), PilotFullName = "Robert Spadovar", FlightDuration = System.TimeSpan.FromMinutes(92), Price = 140, ShortInfo = "Wroclaw is the most beautiful city in Poland.", Picture = File.ReadAllBytes("Assets/osijek.jpg"), Notes = "According to professional traveller Josh Gates, Travel is motion, and as Newton pointed out, things that start moving want to keep moving.", AvailableToMemberTypeId = 2, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 17, CityId = 17, DestinationAirportId = 23, OfferId = 2, PlaneId = 1, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 10, 17), VoucherCode = "@GUbI", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2022, 5, 15), EndDate = new System.DateTime(2022, 5, 21), PilotFullName = "Robert Spadovar", FlightDuration = System.TimeSpan.FromMinutes(122), Price = 1024, ShortInfo = "Life is journey, travel it well.", Picture = File.ReadAllBytes("Assets/makarska.jpg"), Notes = "Please remember about discounts for organizers of events in the Centennial Hall.", AvailableToMemberTypeId = 1, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 18, CityId = 18, DestinationAirportId = 24, OfferId = 2, PlaneId = 3, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 10, 18), VoucherCode = "u7NQz", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2022, 5, 16), EndDate = new System.DateTime(2022, 5, 20), PilotFullName = "Juraj Samouk", FlightDuration = System.TimeSpan.FromMinutes(115), Price = 1024, ShortInfo = "Life is a journey. When we stop, things don’t go right.", Picture = File.ReadAllBytes("Assets/zadar.jpg"), Notes = "According to professional traveller Josh Gates, Travel is motion, and as Newton pointed out, things that start moving want to keep moving.", AvailableToMemberTypeId = 1, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 19, CityId = 19, DestinationAirportId = 25, OfferId = 3, PlaneId = 2, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 10, 19), VoucherCode = "ag=OR", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2023, 11, 12), EndDate = new System.DateTime(2023, 12, 30), PilotFullName = "Pilotko Pilotovicz", FlightDuration = System.TimeSpan.FromMinutes(122), Price = 260, ShortInfo = "In order to complete our amazing life journey successfully, it is vital that we turn each and every dark tear into a pearl of wisdom, and find the blessing in every curse.", Picture = File.ReadAllBytes("Assets/auckland.jpg"), Notes = "Please remember that in order to submit orders you need an appropriate agreement signed with the Bank or DMBH for relevant services and/or products.", AvailableToMemberTypeId = 1, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 20, CityId = 20, DestinationAirportId = 26, OfferId = 3, PlaneId = 1, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 10, 20), VoucherCode = "k84$5", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2023, 11, 13), EndDate = new System.DateTime(2023, 12, 21), PilotFullName = "Robert Spadovar", FlightDuration = System.TimeSpan.FromMinutes(122), Price = 140, ShortInfo = "You take people, you put them on a journey, you give them peril, you find out who they really are.", Picture = File.ReadAllBytes("Assets/wellington.jpg"), Notes = "According to professional traveller Josh Gates, Travel is motion, and as Newton pointed out, things that start moving want to keep moving.", AvailableToMemberTypeId = 1, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 21, CityId = 21, DestinationAirportId = 27, OfferId = 3, PlaneId = 2, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 10, 10), VoucherCode = "ZZ#F*", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2023, 11, 14), EndDate = new System.DateTime(2023, 12, 22), PilotFullName = "Letko Krilovac", FlightDuration = System.TimeSpan.FromMinutes(115), Price = 510, ShortInfo = "Life is journey, travel it well.", Picture = File.ReadAllBytes("Assets/christchurch.jpg"), Notes = "Please remember that in order to submit orders you need an appropriate agreement signed with the Bank or DMBH for relevant services and/or products.", AvailableToMemberTypeId = 1, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 22, CityId = 22, DestinationAirportId = 28, OfferId = 3, PlaneId = 2, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 9, 1), VoucherCode = "BWc4W", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2023, 11, 15), EndDate = new System.DateTime(2023, 12, 26), PilotFullName = "Pilotko Pilotovicz", FlightDuration = System.TimeSpan.FromMinutes(115), Price = 140, ShortInfo = "The best part of life is to decide to make the journey through life like a best selling book.", Picture = File.ReadAllBytes("Assets/hamilton.jpg"), Notes = "We are pleased to inform you that registered clients of PKS POLONUS can use the new option: SENDING TICKETS by SMS.", AvailableToMemberTypeId = 2, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 23, CityId = 23, DestinationAirportId = 29, OfferId = 4, PlaneId = 1, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 9, 2), VoucherCode = "HyX75", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2023, 4, 10), EndDate = new System.DateTime(2023, 4, 30), PilotFullName = "Juraj Samouk", FlightDuration = System.TimeSpan.FromMinutes(122), Price = 260, ShortInfo = "Life is a journey. When we stop, things don’t go right.", Picture = File.ReadAllBytes("Assets/goldcoast.jpg"), Notes = "Please remember about discounts for organizers of events in the Centennial Hall.", AvailableToMemberTypeId = 1, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 24, CityId = 24, DestinationAirportId = 30, OfferId = 4, PlaneId = 3, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 9, 3), VoucherCode = "Hd3EH", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2023, 4, 11), EndDate = new System.DateTime(2023, 4, 29), PilotFullName = "Pilotko Pilotovicz", FlightDuration = System.TimeSpan.FromMinutes(92), Price = 1024, ShortInfo = "The best part of life is to decide to make the journey through life like a best selling book.", Picture = File.ReadAllBytes("Assets/cairns.jpg"), Notes = "We are pleased to inform you that registered clients of PKS POLONUS can use the new option: SENDING TICKETS by SMS.", AvailableToMemberTypeId = 1, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 25, CityId = 25, DestinationAirportId = 31, OfferId = 4, PlaneId = 1, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 9, 4), VoucherCode = "HlX4(", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2023, 4, 13), EndDate = new System.DateTime(2023, 4, 28), PilotFullName = "Pilotko Pilotovicz", FlightDuration = System.TimeSpan.FromMinutes(92), Price = 260, ShortInfo = "In order to complete our amazing life journey successfully, it is vital that we turn each and every dark tear into a pearl of wisdom, and find the blessing in every curse.", Picture = File.ReadAllBytes("Assets/darwin.jpg"), Notes = "Dear passengers, in order to create a time-saving airport experience, in some airports we accept only credit card payments.", AvailableToMemberTypeId = 1, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 26, CityId = 26, DestinationAirportId = 32, OfferId = 4, PlaneId = 2, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 9, 5), VoucherCode = "GWGS)", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2023, 4, 14), EndDate = new System.DateTime(2023, 4, 27), PilotFullName = "Letko Krilovac", FlightDuration = System.TimeSpan.FromMinutes(122), Price = 140, ShortInfo = "In order to complete our amazing life journey successfully, it is vital that we turn each and every dark tear into a pearl of wisdom, and find the blessing in every curse.", Picture = File.ReadAllBytes("Assets/adelaide.jpg"), Notes = "According to professional traveller Josh Gates, Travel is motion, and as Newton pointed out, things that start moving want to keep moving.", AvailableToMemberTypeId = 2, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 27, CityId = 27, DestinationAirportId = 33, OfferId = 4, PlaneId = 1, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 9, 6), VoucherCode = "TY7Ig", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2023, 4, 12), EndDate = new System.DateTime(2023, 4, 30), PilotFullName = "Pilotko Pilotovicz", FlightDuration = System.TimeSpan.FromMinutes(115), Price = 510, ShortInfo = "Life is a journey. When we stop, things don’t go right.", Picture = File.ReadAllBytes("Assets/hobart.jpg"), Notes = "Please remember that in order to submit orders you need an appropriate agreement signed with the Bank or DMBH for relevant services and/or products.", AvailableToMemberTypeId = 1, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 28, CityId = 28, DestinationAirportId = 34, OfferId = 6, PlaneId = 3, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 9, 7), VoucherCode = "+cgAh", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2022, 5, 2), EndDate = new System.DateTime(2022, 5, 22), PilotFullName = "Letko Krilovac", FlightDuration = System.TimeSpan.FromMinutes(195), Price = 140, ShortInfo = "Life is journey, travel it well.", Picture = File.ReadAllBytes("Assets/tokyo.jpg"), Notes = "Dear passengers, in order to create a time-saving airport experience, in some airports we accept only credit card payments.", AvailableToMemberTypeId = 1, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 29, CityId = 29, DestinationAirportId = 37, OfferId = 6, PlaneId = 1, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 9, 8), VoucherCode = "1RT4F", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2022, 5, 3), EndDate = new System.DateTime(2022, 5, 23), PilotFullName = "Juraj Samouk", FlightDuration = System.TimeSpan.FromMinutes(92), Price = 260, ShortInfo = "Life is journey, travel it well.", Picture = File.ReadAllBytes("Assets/yokohama.jpg"), Notes = "We are pleased to inform you that registered clients of PKS POLONUS can use the new option: SENDING TICKETS by SMS.", AvailableToMemberTypeId = 1, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 30, CityId = 30, DestinationAirportId = 38, OfferId = 6, PlaneId = 5, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 9, 9), VoucherCode = "v_GGM", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2022, 5, 5), EndDate = new System.DateTime(2022, 5, 24), PilotFullName = "Pilotko Pilotovicz", FlightDuration = System.TimeSpan.FromMinutes(122), Price = 1024, ShortInfo = "Life is a journey. When we stop, things don’t go right.", Picture = File.ReadAllBytes("Assets/nagoya.jpg"), Notes = "Please remember about discounts for organizers of events in the Centennial Hall.", AvailableToMemberTypeId = 1, IsActive = true });
            modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 31, CityId = 31, DestinationAirportId = 39, OfferId = 6, PlaneId = 4, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 9, 10), VoucherCode = "A$WpO", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2022, 5, 7), EndDate = new System.DateTime(2022, 5, 25), PilotFullName = "Letko Krilovac", FlightDuration = System.TimeSpan.FromMinutes(115), Price = 140, ShortInfo = "In order to complete our amazing life journey successfully, it is vital that we turn each and every dark tear into a pearl of wisdom, and find the blessing in every curse.", Picture = File.ReadAllBytes("Assets/kyoto.jpg"), Notes = "Dear passengers, in order to create a time-saving airport experience, in some airports we accept only credit card payments.", AvailableToMemberTypeId = 3, IsActive = true });

            // Reservations
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 1, UserId = 1, FlightId = 1, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = null, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 2, UserId = 1, FlightId = 6, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = null, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 3, UserId = 1, FlightId = 11, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = 4, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 4, UserId = 1, FlightId = 16, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = 4, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 5, UserId = 2, FlightId = 2, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = null, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 6, UserId = 2, FlightId = 7, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = null, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 7, UserId = 2, FlightId = 12, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = 4, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 8, UserId = 2, FlightId = 17, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = 4, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 9, UserId = 3, FlightId = 3, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = null, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 10, UserId = 3, FlightId = 8, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = null, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 11, UserId = 3, FlightId = 13, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = 4, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 12, UserId = 3, FlightId = 18, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = 4, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 13, UserId = 4, FlightId = 4, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = null, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 14, UserId = 4, FlightId = 9, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = null, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 15, UserId = 4, FlightId = 14, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = 4, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 16, UserId = 4, FlightId = 19, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = 4, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 17, UserId = 5, FlightId = 5, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = null, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 18, UserId = 5, FlightId = 10, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = null, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 19, UserId = 5, FlightId = 15, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = 4, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 20, UserId = 5, FlightId = 20, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = 4, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 21, UserId = 3, FlightId = 1, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = null, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 22, UserId = 3, FlightId = 6, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = null, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 23, UserId = 3, FlightId = 11, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = 4, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 24, UserId = 3, FlightId = 16, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = 4, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 25, UserId = 3, FlightId = 2, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = null, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 26, UserId = 3, FlightId = 7, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = null, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 27, UserId = 3, FlightId = 12, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = 4, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 28, UserId = 3, FlightId = 17, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = 4, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 29, UserId = 1, FlightId = 2, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = null, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 30, UserId = 1, FlightId = 7, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = null, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 31, UserId = 1, FlightId = 12, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = 4, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 32, UserId = 1, FlightId = 17, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = 4, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 33, UserId = 1, FlightId = 3, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = null, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 34, UserId = 1, FlightId = 8, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = null, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 35, UserId = 1, FlightId = 13, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = 4, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 36, UserId = 1, FlightId = 18, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = 4, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 37, UserId = 2, FlightId = 4, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = null, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 38, UserId = 2, FlightId = 9, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = null, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 39, UserId = 2, FlightId = 14, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = 4, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 40, UserId = 2, FlightId = 19, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = 4, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 41, UserId = 2, FlightId = 5, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = null, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 42, UserId = 2, FlightId = 10, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = null, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 43, UserId = 2, FlightId = 15, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = 4, Notes = "" });
            modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 44, UserId = 2, FlightId = 20, ReservationDate = new System.DateTime(2022, 10, 11), BaseTicketPrice = 0, TotalDiscountPercentage = 0, IsValid = true, CashierId = 4, Notes = "" });

            // ReservedSeats
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 1, ReservationId = 1, Direction = "1", SeatPrice = 0, SeatIndex = 34 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 2, ReservationId = 1, Direction = "2", SeatPrice = 0, SeatIndex = 71 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 3, ReservationId = 2, Direction = "1", SeatPrice = 0, SeatIndex = 22 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 4, ReservationId = 2, Direction = "2", SeatPrice = 0, SeatIndex = 61 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 5, ReservationId = 3, Direction = "1", SeatPrice = 0, SeatIndex = 17 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 6, ReservationId = 3, Direction = "2", SeatPrice = 0, SeatIndex = 54 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 7, ReservationId = 4, Direction = "1", SeatPrice = 0, SeatIndex = 41 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 8, ReservationId = 4, Direction = "2", SeatPrice = 0, SeatIndex = 17 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 9, ReservationId = 5, Direction = "1", SeatPrice = 0, SeatIndex = 22 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 10, ReservationId = 5, Direction = "2", SeatPrice = 0, SeatIndex = 51 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 11, ReservationId = 6, Direction = "1", SeatPrice = 0, SeatIndex = 72 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 12, ReservationId = 6, Direction = "2", SeatPrice = 0, SeatIndex = 52 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 13, ReservationId = 7, Direction = "1", SeatPrice = 0, SeatIndex = 23 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 14, ReservationId = 7, Direction = "2", SeatPrice = 0, SeatIndex = 64 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 15, ReservationId = 8, Direction = "1", SeatPrice = 0, SeatIndex = 6 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 16, ReservationId = 8, Direction = "2", SeatPrice = 0, SeatIndex = 75 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 17, ReservationId = 9, Direction = "1", SeatPrice = 0, SeatIndex = 59 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 18, ReservationId = 9, Direction = "2", SeatPrice = 0, SeatIndex = 78 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 19, ReservationId = 10, Direction = "1", SeatPrice = 0, SeatIndex = 60 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 20, ReservationId = 10, Direction = "2", SeatPrice = 0, SeatIndex = 4 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 21, ReservationId = 11, Direction = "1", SeatPrice = 0, SeatIndex = 8 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 22, ReservationId = 11, Direction = "2", SeatPrice = 0, SeatIndex = 80 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 23, ReservationId = 12, Direction = "1", SeatPrice = 0, SeatIndex = 60 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 24, ReservationId = 12, Direction = "2", SeatPrice = 0, SeatIndex = 22 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 25, ReservationId = 13, Direction = "1", SeatPrice = 0, SeatIndex = 33 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 26, ReservationId = 13, Direction = "2", SeatPrice = 0, SeatIndex = 29 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 27, ReservationId = 14, Direction = "1", SeatPrice = 0, SeatIndex = 53 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 28, ReservationId = 14, Direction = "2", SeatPrice = 0, SeatIndex = 66 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 29, ReservationId = 15, Direction = "1", SeatPrice = 0, SeatIndex = 28 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 30, ReservationId = 15, Direction = "2", SeatPrice = 0, SeatIndex = 4 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 31, ReservationId = 16, Direction = "1", SeatPrice = 0, SeatIndex = 54 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 32, ReservationId = 16, Direction = "2", SeatPrice = 0, SeatIndex = 72 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 33, ReservationId = 17, Direction = "1", SeatPrice = 0, SeatIndex = 20 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 34, ReservationId = 17, Direction = "2", SeatPrice = 0, SeatIndex = 32 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 35, ReservationId = 18, Direction = "1", SeatPrice = 0, SeatIndex = 6 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 36, ReservationId = 18, Direction = "2", SeatPrice = 0, SeatIndex = 33 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 37, ReservationId = 19, Direction = "1", SeatPrice = 0, SeatIndex = 66 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 38, ReservationId = 19, Direction = "2", SeatPrice = 0, SeatIndex = 1 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 39, ReservationId = 20, Direction = "1", SeatPrice = 0, SeatIndex = 64 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 40, ReservationId = 20, Direction = "2", SeatPrice = 0, SeatIndex = 15 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 41, ReservationId = 21, Direction = "1", SeatPrice = 0, SeatIndex = 22 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 42, ReservationId = 21, Direction = "2", SeatPrice = 0, SeatIndex = 63 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 43, ReservationId = 22, Direction = "1", SeatPrice = 0, SeatIndex = 27 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 44, ReservationId = 22, Direction = "2", SeatPrice = 0, SeatIndex = 9 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 45, ReservationId = 23, Direction = "1", SeatPrice = 0, SeatIndex = 75 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 46, ReservationId = 23, Direction = "2", SeatPrice = 0, SeatIndex = 21 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 47, ReservationId = 24, Direction = "1", SeatPrice = 0, SeatIndex = 22 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 48, ReservationId = 24, Direction = "2", SeatPrice = 0, SeatIndex = 66 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 49, ReservationId = 25, Direction = "1", SeatPrice = 0, SeatIndex = 72 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 50, ReservationId = 25, Direction = "2", SeatPrice = 0, SeatIndex = 20 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 51, ReservationId = 26, Direction = "1", SeatPrice = 0, SeatIndex = 14 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 52, ReservationId = 26, Direction = "2", SeatPrice = 0, SeatIndex = 11 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 53, ReservationId = 27, Direction = "1", SeatPrice = 0, SeatIndex = 44 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 54, ReservationId = 27, Direction = "2", SeatPrice = 0, SeatIndex = 19 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 55, ReservationId = 28, Direction = "1", SeatPrice = 0, SeatIndex = 3 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 56, ReservationId = 28, Direction = "2", SeatPrice = 0, SeatIndex = 5 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 57, ReservationId = 29, Direction = "1", SeatPrice = 0, SeatIndex = 22 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 58, ReservationId = 29, Direction = "2", SeatPrice = 0, SeatIndex = 60 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 59, ReservationId = 30, Direction = "1", SeatPrice = 0, SeatIndex = 82 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 60, ReservationId = 30, Direction = "2", SeatPrice = 0, SeatIndex = 7 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 61, ReservationId = 31, Direction = "1", SeatPrice = 0, SeatIndex = 18 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 62, ReservationId = 31, Direction = "2", SeatPrice = 0, SeatIndex = 12 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 63, ReservationId = 32, Direction = "1", SeatPrice = 0, SeatIndex = 61 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 64, ReservationId = 32, Direction = "2", SeatPrice = 0, SeatIndex = 56 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 65, ReservationId = 33, Direction = "1", SeatPrice = 0, SeatIndex = 72 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 66, ReservationId = 33, Direction = "2", SeatPrice = 0, SeatIndex = 65 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 67, ReservationId = 34, Direction = "1", SeatPrice = 0, SeatIndex = 50 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 68, ReservationId = 34, Direction = "2", SeatPrice = 0, SeatIndex = 51 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 69, ReservationId = 35, Direction = "1", SeatPrice = 0, SeatIndex = 19 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 70, ReservationId = 35, Direction = "2", SeatPrice = 0, SeatIndex = 6 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 71, ReservationId = 36, Direction = "1", SeatPrice = 0, SeatIndex = 54 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 72, ReservationId = 36, Direction = "2", SeatPrice = 0, SeatIndex = 38 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 73, ReservationId = 37, Direction = "1", SeatPrice = 0, SeatIndex = 78 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 74, ReservationId = 37, Direction = "2", SeatPrice = 0, SeatIndex = 13 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 75, ReservationId = 38, Direction = "1", SeatPrice = 0, SeatIndex = 17 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 76, ReservationId = 38, Direction = "2", SeatPrice = 0, SeatIndex = 2 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 77, ReservationId = 39, Direction = "1", SeatPrice = 0, SeatIndex = 45 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 78, ReservationId = 39, Direction = "2", SeatPrice = 0, SeatIndex = 44 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 79, ReservationId = 40, Direction = "1", SeatPrice = 0, SeatIndex = 55 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 80, ReservationId = 40, Direction = "2", SeatPrice = 0, SeatIndex = 4 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 81, ReservationId = 41, Direction = "1", SeatPrice = 0, SeatIndex = 38 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 82, ReservationId = 41, Direction = "2", SeatPrice = 0, SeatIndex = 25 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 83, ReservationId = 42, Direction = "1", SeatPrice = 0, SeatIndex = 34 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 84, ReservationId = 42, Direction = "2", SeatPrice = 0, SeatIndex = 61 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 85, ReservationId = 43, Direction = "1", SeatPrice = 0, SeatIndex = 59 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 86, ReservationId = 43, Direction = "2", SeatPrice = 0, SeatIndex = 52 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 87, ReservationId = 44, Direction = "1", SeatPrice = 0, SeatIndex = 19 });
            modelBuilder.Entity<ReservedSeats>().HasData(new ReservedSeats() { ReservedSeatId = 88, ReservationId = 44, Direction = "2", SeatPrice = 0, SeatIndex = 28 });

            // Ratings
            modelBuilder.Entity<Ratings>().HasData(new Ratings() { RatingId = 1, ReservationId = 3, RatingValue = 4, Notes = "A wonderful trip.", DateAdded = new System.DateTime(2022, 7, 3) });
            modelBuilder.Entity<Ratings>().HasData(new Ratings() { RatingId = 2, ReservationId = 23, RatingValue = 3, Notes = "Don't waste your time. But the food was good.", DateAdded = new System.DateTime(2022, 9, 9) });
            modelBuilder.Entity<Ratings>().HasData(new Ratings() { RatingId = 3, ReservationId = 7, RatingValue = 1, Notes = "Boat was immaculate", DateAdded = new System.DateTime(2022, 7, 4) });
            modelBuilder.Entity<Ratings>().HasData(new Ratings() { RatingId = 4, ReservationId = 27, RatingValue = 4, Notes = "Food was not delicious.", DateAdded = new System.DateTime(2022, 6, 21) });
            modelBuilder.Entity<Ratings>().HasData(new Ratings() { RatingId = 5, ReservationId = 31, RatingValue = 1, Notes = "I will never go to this kind of trips anymore.", DateAdded = new System.DateTime(2022, 7, 10) });
            modelBuilder.Entity<Ratings>().HasData(new Ratings() { RatingId = 6, ReservationId = 11, RatingValue = 5, Notes = "Swimming in the most gorgeous coves, kayaking on crystal blue waters, hiking around ruins and into small remote villages and relaxing on the boat... it was the best trip ever.", DateAdded = new System.DateTime(2022, 8, 29) });
            modelBuilder.Entity<Ratings>().HasData(new Ratings() { RatingId = 7, ReservationId = 35, RatingValue = 4, Notes = "Good overall", DateAdded = new System.DateTime(2022, 10, 6) });
            modelBuilder.Entity<Ratings>().HasData(new Ratings() { RatingId = 8, ReservationId = 15, RatingValue = 4, Notes = "Not bad.", DateAdded = new System.DateTime(2022, 8, 31) });
            modelBuilder.Entity<Ratings>().HasData(new Ratings() { RatingId = 9, ReservationId = 39, RatingValue = 5, Notes = "The comfort and beauty of the gulet, the incredibly caring crew, the delicious food, the history we learned from our competent and friendly leader, along with the stunning beauty of the islands.", DateAdded = new System.DateTime(2022, 8, 7) });
            modelBuilder.Entity<Ratings>().HasData(new Ratings() { RatingId = 10, ReservationId = 19, RatingValue = 5, Notes = "What a wonderful experience! The two tour leaders who were archaeologists enthralled us with the history of the Islands.", DateAdded = new System.DateTime(2022, 9, 18) });
            modelBuilder.Entity<Ratings>().HasData(new Ratings() { RatingId = 11, ReservationId = 43, RatingValue = 1, Notes = "I was disgusted.", DateAdded = new System.DateTime(2022, 8, 25) });
            modelBuilder.Entity<Ratings>().HasData(new Ratings() { RatingId = 12, ReservationId = 4, RatingValue = 3, Notes = "The holiday of a life time - our gulet adventure in the Dodecanese Greek Islands was without a doubt our favourite family trip.", DateAdded = new System.DateTime(2022, 10, 1) });
            modelBuilder.Entity<Ratings>().HasData(new Ratings() { RatingId = 13, ReservationId = 24, RatingValue = 1, Notes = "I don't understand all the hype about travelling.", DateAdded = new System.DateTime(2022, 10, 1) });
            modelBuilder.Entity<Ratings>().HasData(new Ratings() { RatingId = 14, ReservationId = 8, RatingValue = 5, Notes = "We definitely will be back!", DateAdded = new System.DateTime(2022, 9, 24) });
            modelBuilder.Entity<Ratings>().HasData(new Ratings() { RatingId = 15, ReservationId = 28, RatingValue = 2, Notes = "Our gulet cruise from Kos to Patmos was everything and more than expected.", DateAdded = new System.DateTime(2022, 6, 22) });
            modelBuilder.Entity<Ratings>().HasData(new Ratings() { RatingId = 16, ReservationId = 32, RatingValue = 1, Notes = "For adults, we were pleasantly surprised by the diversity of our trip.", DateAdded = new System.DateTime(2022, 6, 16) });
            modelBuilder.Entity<Ratings>().HasData(new Ratings() { RatingId = 17, ReservationId = 12, RatingValue = 5, Notes = "Not only everything was perfect, but we felt, in every instance, that our guides and our gulet crew truly cared about us, both the kids and adults, and did their best to make this trip memorable.", DateAdded = new System.DateTime(2022, 8, 26) });
            modelBuilder.Entity<Ratings>().HasData(new Ratings() { RatingId = 18, ReservationId = 36, RatingValue = 5, Notes = "We had the most remarkable family tour with Peter Sommer Travels.", DateAdded = new System.DateTime(2022, 7, 30) });

            //modelBuilder.Entity<Reservations>().HasData(new Reservations() { ReservationId = 1, UserId = 1,  FlightId = 1, ReservationDate = new System.DateTime(2022, 11, 11), BaseTicketPrice = 100, TotalDiscountPercentage = 0, IsValid = true, CashierId = 1, Notes = "" });



            //modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 1, CityId = 1, DestinationAirportId = 1, OfferId = 1, PlaneId = 1, AddedByUserId = 3, AddedDate = new System.DateTime(2022, 10, 1), VoucherCode = "C!ysl", VoucherDiscountPercentage = 0, StartDate = new System.DateTime(2023, 4, 10), EndDate = new System.DateTime(2023, 4, 15), PilotFullName = "Pilotko Pilotovicz", FlightDuration = System.TimeSpan.FromMinutes(61), Price = 140, ShortInfo = "Life is a journey. When we stop, things don’t go right.", Picture = File.ReadAllBytes("Assets/flight 1.jpg"), Notes = "Please remember about discounts for organizers of events in the Centennial Hall.", AvailableToMemberTypeId = 1, IsActive = true });


            //modelBuilder.Entity<Flights>().HasData(new Flights() { FlightId = 1, FlightDuration = System.TimeSpan.FromMinutes(100), })

            //modelBuilder.Entity<Countries>().HasData(new Countries()
            //{
            //    CountryId = 2,
            //    CountryName = "Poland",
            //    Picture = File.ReadAllBytes("Assets/countrytest.jpg")
            //});



            //////// TODO: JR
            //modelBuilder.Entity<Cities>().HasData(new Cities()
            //{
            //    CityId = 1,
            //    CityName = "Test",
            //    ShortInfo = "Shor",
            //    Picture = File.ReadAllBytes("Assets/cityname.jpg"),
            //    CountryId = 1,
            //});
        }
    }
}
